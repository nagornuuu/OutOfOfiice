@page "/projects"
@using OutOfOffice.Models
@using OutOfOffice.Services
@inject ProjectService ProjectService
@inject ILogger<ProjectListEmployee> Logger
@inject NavigationManager Navigation

<h3>Projects</h3>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-secondary mb-3" @onclick="NavigateBackToEmployeeDashboard">Back to Employee Dashboard</button>
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Search by project number..." @oninput="SearchProjects" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th @onclick='() => SortTable("ID")'>ID</th>
                <th @onclick='() => SortTable("ProjectType")'>Project Type</th>
                <th @onclick='() => SortTable("StartDate")'>Start Date</th>
                <th @onclick='() => SortTable("EndDate")'>End Date</th>
                <th @onclick='() => SortTable("Status")'>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in filteredProjects)
            {
                <tr>
                    <td>@project.ID</td>
                    <td>@project.ProjectType</td>
                    <td>@project.StartDate.ToShortDateString()</td>
                    <td>@project.EndDate.ToShortDateString()</td>
                    <td>@project.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => OpenProject(project.ID)">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Project> projects;
    private List<Project> filteredProjects;
    private string searchQuery = string.Empty;
    private string sortColumn = "ID";
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProjectsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading projects");
        }
    }

    private async Task LoadProjectsAsync()
    {
        projects = await ProjectService.GetProjectsAsync();
        FilterAndSortProjects();
    }

    private void FilterAndSortProjects()
    {
        filteredProjects = projects
            .Where(p => string.IsNullOrEmpty(searchQuery) || p.ID.ToString().Contains(searchQuery))
            .ToList();

        SortProjects();
    }

    private void SortProjects()
    {
        switch (sortColumn)
        {
            case "ID":
                filteredProjects = sortAscending ? filteredProjects.OrderBy(p => p.ID).ToList() : filteredProjects.OrderByDescending(p => p.ID).ToList();
                break;
            case "ProjectType":
                filteredProjects = sortAscending ? filteredProjects.OrderBy(p => p.ProjectType).ToList() : filteredProjects.OrderByDescending(p => p.ProjectType).ToList();
                break;
            case "StartDate":
                filteredProjects = sortAscending ? filteredProjects.OrderBy(p => p.StartDate).ToList() : filteredProjects.OrderByDescending(p => p.StartDate).ToList();
                break;
            case "EndDate":
                filteredProjects = sortAscending ? filteredProjects.OrderBy(p => p.EndDate).ToList() : filteredProjects.OrderByDescending(p => p.EndDate).ToList();
                break;
            case "Status":
                filteredProjects = sortAscending ? filteredProjects.OrderBy(p => p.Status).ToList() : filteredProjects.OrderByDescending(p => p.Status).ToList();
                break;
        }
    }

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        SortProjects();
    }

    private void SearchProjects(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString();
        FilterAndSortProjects();
    }

    private void OpenProject(int id)
    {
        Navigation.NavigateTo($"/projects/details/{id}");
    }
    private void NavigateBackToEmployeeDashboard()
    {
        Navigation.NavigateTo("/employee-dashboard");
    }
}
