@page "/projects/pm/update/{id:int}"
@using Microsoft.AspNetCore.Components.Forms
@using OutOfOffice.Models
@using OutOfOffice.Services
@inject ProjectService ProjectService
@inject NavigationManager Navigation

<h3>Edit Project</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@project" OnValidSubmit="ProjectEdit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="ProjectType">Project Type</label>
        <InputText id="ProjectType" class="form-control" @bind-Value="project.ProjectType" />
        <ValidationMessage For="@(() => project.ProjectType)" />
    </div>
    <div class="form-group">
        <label for="StartDate">Start Date</label>
        <InputDate id="StartDate" class="form-control" @bind-Value="project.StartDate" />
        <ValidationMessage For="@(() => project.StartDate)" />
    </div>
    <div class="form-group">
        <label for="EndDate">End Date</label>
        <InputDate id="EndDate" class="form-control" @bind-Value="project.EndDate" />
        <ValidationMessage For="@(() => project.EndDate)" />
    </div>
    <div class="form-group">
        <label for="Status">Status</label>
        <InputText id="Status" class="form-control" @bind-Value="project.Status" />
        <ValidationMessage For="@(() => project.Status)" />
    </div>
    <div class="form-group">
        <label for="ProjectManagerId">Project Manager</label>
        <InputSelect id="ProjectManagerId" class="form-control" @bind-Value="project.ProjectManagerId">
            <option value="">Select Project Manager</option>
            @foreach (var manager in projectManagers)
            {
                <option value="@manager.ID">@manager.FullName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => project.ProjectManagerId)" />
    </div>
    <div class="form-group">
        <label for="Comment">Comment</label>
        <InputTextArea id="Comment" class="form-control" @bind-Value="project.Comment" />
        <ValidationMessage For="@(() => project.Comment)" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

<div>
    <NavLink class="btn btn-secondary" href="/projects/pm">Back to List</NavLink>
</div>

@code {
    [Parameter] public int id { get; set; }
    private Project project = new Project();
    private List<Employee> projectManagers = new List<Employee>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
    }

    private async Task LoadProject()
    {
        try
        {
            project = await ProjectService.GetProjectAsync(id);
            projectManagers = await ProjectService.GetProjectManagersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task ProjectEdit()
    {
        try
        {
            project.StartDate = project.StartDate.ToUniversalTime();
            project.EndDate = project.EndDate.ToUniversalTime();
            await ProjectService.UpdateProjectAsync(project);
            Navigation.NavigateTo("/projects/pm");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error editing project: {ex.Message}";
        }
    }
}
