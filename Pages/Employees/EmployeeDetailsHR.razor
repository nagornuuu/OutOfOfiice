@page "/employees/hr/details/{id:int}"
@using OutOfOffice.Models
@using OutOfOffice.Services
@inject EmployeeService EmployeeService
@inject NavigationManager Navigation

<h3>Employee Details (HR Manager)</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form>
        <div class="form-group">
            <label for="FullName">Full Name</label>
            <input type="text" id="FullName" class="form-control" value="@employee.FullName" disabled />
        </div>
        <div class="form-group">
            <label for="Subdivision">Subdivision</label>
            <input type="text" id="Subdivision" class="form-control" value="@employee.Subdivision" disabled />
        </div>
        <div class="form-group">
            <label for="Position">Position</label>
            <input type="text" id="Position" class="form-control" value="@employee.Position" disabled />
        </div>
        <div class="form-group">
            <label for="Status">Status</label>
            <input type="text" id="Status" class="form-control" value="@employee.Status" disabled />
        </div>
        <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Back to List</button>
    </form>
}

@code {
    [Parameter] public int id { get; set; }
    private Employee employee;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployee();
    }

    private async Task LoadEmployee()
    {
        try
        {
            employee = await EmployeeService.GetEmployeeByIdAsync(id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/employees/hr");
    }
}
