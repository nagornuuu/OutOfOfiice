@page "/employees/edit/{id:int}"
@using OutOfOffice.Models
@using OutOfOffice.Services
@inject EmployeeService EmployeeService
@inject NavigationManager Navigation

<h3>Edit Employee</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@employee" OnValidSubmit="UpdateEmployee">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="FullName">Full Name</label>
            <InputText id="FullName" class="form-control" @bind-Value="employee.FullName" />
            <ValidationMessage For="@(() => employee.FullName)" />
        </div>
        <div class="form-group">
            <label for="Subdivision">Subdivision</label>
            <InputSelect id="Subdivision" class="form-control" @bind-Value="employee.Subdivision">
                @foreach (var subdivision in subdivisions)
                {
                    <option value="@subdivision">@subdivision</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => employee.Subdivision)" />
        </div>
        <div class="form-group">
            <label for="Position">Position</label>
            <InputSelect id="Position" class="form-control" @bind-Value="employee.Position">
                @foreach (var position in positions)
                {
                    <option value="@position">@position</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => employee.Position)" />
        </div>
        <div class="form-group">
            <label for="Status">Status</label>
            <InputSelect id="Status" class="form-control" @bind-Value="employee.Status">
                <option value="Active">Active</option>
                <option value="Inactive">Inactive</option>
            </InputSelect>
            <ValidationMessage For="@(() => employee.Status)" />
        </div>
        <div class="form-group">
            <label for="PeoplePartner">People Partner</label>
            <InputSelect id="PeoplePartner" class="form-control" @bind-Value="employee.PeoplePartner">
                @foreach (var hrManager in hrManagers)
                {
                    <option value="@hrManager.ID">@hrManager.FullName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => employee.PeoplePartner)" />
        </div>
        <div class="form-group">
            <label for="OutOfOfficeBalance">Out of Office Balance</label>
            <InputNumber id="OutOfOfficeBalance" class="form-control" @bind-Value="employee.OutOfOfficeBalance" />
            <ValidationMessage For="@(() => employee.OutOfOfficeBalance)" />
        </div>
        <div class="form-group">
            <label for="Photo">Photo</label>
            <InputFile id="Photo" OnChange="UploadPhoto" />
            @if (employee.Photo != null)
            {
                <img src="@($"data:image/png;base64,{Convert.ToBase64String(employee.Photo)}")" alt="Employee Photo" class="img-thumbnail" />
            }
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>

    <div>
        <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Back to List</button>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Employee employee = new Employee();
    private string errorMessage;
    private List<string> subdivisions = new List<string>();
    private List<string> positions = new List<string>();
    private List<Employee> hrManagers = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployee();
        subdivisions = await EmployeeService.GetSubdivisionsAsync();
        positions = await EmployeeService.GetPositionsAsync();
        hrManagers = await EmployeeService.GetHRManagersAsync();
    }

    private async Task LoadEmployee()
    {
        try
        {
            employee = await EmployeeService.GetEmployeeByIdAsync(id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task UpdateEmployee()
    {
        try
        {
            await EmployeeService.UpdateEmployeeAsync(employee);
            Navigation.NavigateTo("/employees/hr");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating employee: {ex.Message}";
        }
    }

    private async Task UploadPhoto(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        employee.Photo = buffer;
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/employees/hr");
    }
}
