@page "/approvalrequests/create"
@using OutOfOffice.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Create Approval Request</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@approvalRequest" OnValidSubmit="ApprovalRequestCreate">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="ApproverId">Approver</label>
        <InputSelect id="ApproverId" class="form-control" @bind-Value="approvalRequest.ApproverId">
            <option value="">Select Approver</option>
            @foreach (var approver in approvers)
            {
                <option value="@approver.ID">@approver.FullName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => approvalRequest.ApproverId)" />
    </div>
    <div class="form-group">
        <label for="LeaveRequestId">Leave Request</label>
        <InputSelect id="LeaveRequestId" class="form-control" @bind-Value="approvalRequest.LeaveRequestId">
            <option value="">Select Leave Request</option>
            @foreach (var leaveRequest in leaveRequests)
            {
                <option value="@leaveRequest.ID">@leaveRequest.AbsenceReason</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => approvalRequest.LeaveRequestId)" />
    </div>
    <div class="form-group">
        <label for="Status">Status</label>
        <InputText id="Status" class="form-control" @bind-Value="approvalRequest.Status" />
        <ValidationMessage For="@(() => approvalRequest.Status)" />
    </div>
    <div class="form-group">
        <label for="Comment">Comment</label>
        <InputTextArea id="Comment" class="form-control" @bind-Value="approvalRequest.Comment" />
        <ValidationMessage For="@(() => approvalRequest.Comment)" />
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

<div>
    <NavLink href="/approvalrequests" class="btn btn-secondary">Back to List</NavLink>
</div>

@code {
    private ApprovalRequest approvalRequest = new ApprovalRequest();
    private List<Employee> approvers = new List<Employee>();
    private List<LeaveRequest> leaveRequests = new List<LeaveRequest>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            approvers = await Http.GetFromJsonAsync<List<Employee>>("api/employees");
            leaveRequests = await Http.GetFromJsonAsync<List<LeaveRequest>>("api/leaverequests");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task ApprovalRequestCreate()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/approvalrequests", approvalRequest);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/approvalrequests");
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error creating approval request: {responseContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating approval request: {ex.Message}";
        }
    }
}
